const fs = require('fs').promises;
const path = require('path');
const { Octokit } = require('@octokit/rest');

exports.handler = async function (event, context) {
    try {
        const githubToken = process.env.GITHUB_TOKEN;
        if (!githubToken) throw new Error('GITHUB_TOKEN eksik');

        const octokit = new Octokit({ auth: githubToken });

        // .md dosyalarını oku
        const artworksDir = path.join(__dirname, '..', 'data', 'artworks');
        const files = await fs.readdir(artworksDir);
        const mdFiles = files.filter(file => file.endsWith('.md'));

        const artworks = [];
        for (const file of mdFiles) {
            const content = await fs.readFile(path.join(artworksDir, file), 'utf8');
            const frontmatterMatch = content.match(/^---\n([\s\S]+?)\n---/);
            if (!frontmatterMatch) continue;

            const frontmatter = frontmatterMatch[1].split('\n').reduce((acc, line) => {
                const [key, value] = line.split(':').map(part => part.trim());
                if (key && value) acc[key] = value.startsWith('/') ? value : value.replace(/"/g, '');
                return acc;
            }, {});

            if (frontmatter.title && frontmatter.category) {
                artworks.push({
                    title: frontmatter.title,
                    category: frontmatter.category,
                    main_image: frontmatter.main_image || '',
                    description_tr: frontmatter.description_tr || '',
                    description_en: frontmatter.description_en || ''
                });
            }
        }

        const newArtworksJson = JSON.stringify(artworks, null, 2);

        // Mevcut dosyayı kontrol et
        const repoOwner = 'sukruaslan'; // Kendi GitHub kullanıcı adın
        const repoName = 'sukruaslanart'; // Kendi repon
        const branch = 'main';
        let sha, currentArtworksJson = '';
        try {
            const { data } = await octokit.repos.getContent({
                owner: repoOwner,
                repo: repoName,
                path: 'data/artworks.json',
                ref: branch
            });
            sha = data.sha;
            currentArtworksJson = Buffer.from(data.content, 'base64').toString('utf8');
        } catch (error) {
            if (error.status !== 404) throw error;
        }

        if (currentArtworksJson === newArtworksJson) {
            return {
                statusCode: 200,
                body: JSON.stringify({ message: 'Değişiklik yok' })
            };
        }

        // Dosyayı güncelle
        await octokit.repos.createOrUpdateFileContents({
            owner: repoOwner,
            repo: repoName,
            path: 'data/artworks.json',
            message: 'Eserler güncellendi',
            content: Buffer.from(newArtworksJson).toString('base64'),
            sha: sha,
            branch: branch
        });

        return {
            statusCode: 200,
            body: JSON.stringify({ message: 'Eserler başarıyla güncellendi' })
        };
    } catch (error) {
        return {
            statusCode: 500,
            body: JSON.stringify({ error: error.message })
        };
    }
};
